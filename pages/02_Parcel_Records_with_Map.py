# -*- coding: utf-8 -*-
"""pages/02_Parcel_Records_with_Map.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iZUUt5dSV3PCpdHOVk-oi-WusazpVOnp
"""

# pages/02_Parcel_Records_with_Map.py
import json, sqlite3, pandas as pd, streamlit as st
import folium
from streamlit_folium import st_folium

DB_PATH = "geotax360.db"
PARCELS_GEOJSON = "data/parcels.geojson"
BUILDINGS_GEOJSON = "data/buildings.geojson"

st.set_page_config(page_title="GeoTax360 â€¢ Parcels", layout="wide")
st.title("Parcel Records")

# ----------------- Style (subtle visual polish) -----------------
st.markdown("""
<style>
/* Card-like feel */
.block-container {padding-top: 1rem;}
</style>
""", unsafe_allow_html=True)

def read_df(sql, params=None):
    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql_query(sql, conn, params=params or {})
    conn.close()
    return df

# ----------------- Filters -----------------
fil_col1, fil_col2, fil_col3 = st.columns([2,2,2])
with fil_col1:
    ward = st.text_input("Ward (contains)", "")
with fil_col2:
    zone = st.text_input("Zone (contains)", "")
with fil_col3:
    owner = st.text_input("Owner name (contains)", "")

query = """
SELECT p.parcel_id, p.pluscode, p.ward, p.zone, p.neighborhood, c.full_name AS owner
FROM parcels p LEFT JOIN citizens c ON c.owner_id=p.owner_id
WHERE p.ward LIKE :w AND p.zone LIKE :z AND COALESCE(c.full_name,'') LIKE :o
ORDER BY p.parcel_id LIMIT 2000
"""
table = read_df(query, {"w": f"%{ward}%", "z": f"%{zone}%", "o": f"%{owner}%"} )
st.write("### Matching Parcels")
st.dataframe(table, use_container_width=True, hide_index=True)

# ----------------- Map -----------------
st.write("### Map")
basemap = st.selectbox("Basemap", ["Esri.WorldImagery (satellite)", "OpenStreetMap"], index=0)

# Load GeoJSONs (kept small for demo)
with open(PARCELS_GEOJSON, "r", encoding="utf-8") as f:
    parcels = json.load(f)
with open(BUILDINGS_GEOJSON, "r", encoding="utf-8") as f:
    buildings = json.load(f)

# Compute a center (fallback if geometries missing)
def geojson_center(gj):
    # naive: look for first coordinate
    try:
        g = gj["features"][0]["geometry"]
        if g["type"] == "Polygon":
            y = sum([pt[1] for pt in g["coordinates"][0]])/len(g["coordinates"][0])
            x = sum([pt[0] for pt in g["coordinates"][0]])/len(g["coordinates"][0])
            return [y, x]
        if g["type"] == "MultiPolygon":
            pts = g["coordinates"][0][0]
            y = sum([pt[1] for pt in pts])/len(pts)
            x = sum([pt[0] for pt in pts])/len(pts)
            return [y, x]
    except Exception:
        pass
    return [-17.829, 31.053]  # Harare fallback

center = geojson_center(parcels)

m = folium.Map(location=center, zoom_start=14, control_scale=True, tiles=None)

if basemap.startswith("Esri"):
    folium.TileLayer(
        tiles="https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",
        attr="&copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community",
        name="Esri.WorldImagery",
        overlay=False,
        control=True
    ).add_to(m)
else:
    folium.TileLayer("OpenStreetMap", name="OpenStreetMap", control=True).add_to(m)

# Style functions
def style_parcels(_):
    return {"fillColor": "#ffd54f", "color": "#2c3e50", "weight": 1, "fillOpacity": 0.35}

def style_buildings(_):
    return {"fillColor": "#4aa3df", "color": "#1f6fa4", "weight": 1, "fillOpacity": 0.45}

# Filter the GeoJSON on the fly (optional: match current table)
filtered_ids = set(table["parcel_id"].tolist())
def filter_feature(feat):
    pid = feat.get("properties", {}).get("parcel_id")
    return (pid in filtered_ids) if filtered_ids else True

# Parcels layer with popups
folium.GeoJson(
    data={"type":"FeatureCollection", "features":[f for f in parcels["features"] if filter_feature(f)]},
    name="Parcels",
    style_function=style_parcels,
    tooltip=folium.GeoJsonTooltip(fields=["parcel_id","ward","zone","neighborhood"], aliases=["Parcel","Ward","Zone","Neighborhood"])
).add_to(m)

# Buildings layer (no filter by owner; you can add property match if your data links building->parcel_id)
folium.GeoJson(
    data=buildings,
    name="Buildings",
    style_function=style_buildings,
    tooltip=folium.GeoJsonTooltip(fields=["building_id","parcel_id","type"], aliases=["Building","Parcel","Type"])
).add_to(m)

folium.LayerControl(collapsed=False).add_to(m)

# Show the map in Streamlit
st_folium(m, height=560, use_container_width=True)