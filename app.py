# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A73tia7qsXCpvKiAapWdCmkVTF_Djyk7
"""

# app.py
import os
import sqlite3
import pandas as pd
import streamlit as st
from init_db import init_db

DB_PATH = "geotax360.db"

# --- make sure DB exists / is seeded ---
if not os.path.exists(DB_PATH):
    init_db(DB_PATH)

# --- helpers ---
def read_df(sql: str, params=None) -> pd.DataFrame:
    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql_query(sql, conn, params=params or {})
    conn.close()
    return df

st.set_page_config(page_title="GeoTax360", layout="wide")

# Left navigation (sidebar)
st.sidebar.title("GeoTax360")
st.sidebar.caption("Property Tax Management")
page = st.sidebar.radio(
    "Main Navigation",
    [
        "Tax Overview Dashboard",
        "Citizen Records",
        "Parcel Records",
        "Taxes & Assessments (Demo)"
    ],
)

# Global search (bottom of sidebar)
st.sidebar.markdown("---")
q = st.sidebar.text_input("Global Search (name / parcel / pluscode)")
if st.sidebar.button("Search"):
    st.session_state["global_q"] = q

# --- PAGES ---
if page == "Tax Overview Dashboard":
    st.title("Tax Overview Dashboard")

    collected_year = read_df("SELECT COALESCE(SUM(amount),0) AS v FROM payments")["v"][0]
    outstanding    = read_df("SELECT COUNT(*) AS v FROM tax_bills WHERE status='Outstanding'")["v"][0]

    c1, c2 = st.columns(2)
    c1.metric("Collected (Year)", f"${collected_year:,.0f}")
    c2.metric("Outstanding Accounts", f"{outstanding:,}")

    st.info("This is a minimal starter. Add Altair charts and more KPIs as you go.")

    if "global_q" in st.session_state and st.session_state["global_q"]:
        st.subheader(f"Search results for: {st.session_state['global_q']}")
        gq = f"%{st.session_state['global_q']}%"
        results = read_df(
            """
            SELECT 'parcel' AS type, parcel_id AS id, pluscode, ward, zone, neighborhood
            FROM parcels WHERE parcel_id LIKE :q OR pluscode LIKE :q
            UNION ALL
            SELECT 'owner' AS type, CAST(owner_id AS TEXT) AS id, full_name AS pluscode, '' AS ward, '' AS zone, '' AS neighborhood
            FROM citizens WHERE full_name LIKE :q
            """,
            {"q": gq},
        )
        st.dataframe(results, use_container_width=True)

elif page == "Citizen Records":
    st.title("Citizen Records")
    name = st.text_input("Search by name contains", "")
    df = read_df(
        "SELECT owner_id, full_name, nat_id, phone, email, address FROM citizens WHERE full_name LIKE :q",
        {"q": f"%{name}%"},
    )
    st.dataframe(df, use_container_width=True, hide_index=True)

    if not df.empty:
        idx = st.selectbox(
            "Open Individual Record View",
            options=df.index,
            format_func=lambda i: f"{df.loc[i,'full_name']} (ID {df.loc[i,'owner_id']})",
        )
        row = df.loc[idx]
        st.markdown("---")
        st.header("Individual Record View")

        tabs = st.tabs(["General", "Contact", "Payments"])
        # GENERAL
        with tabs[0]:
            p = read_df("SELECT * FROM parcels WHERE owner_id=:oid", {"oid": int(row["owner_id"])})
            a = (
                read_df(
                    """SELECT avm_value_usd FROM assessments
                       WHERE parcel_id=:pid ORDER BY assessed_at DESC LIMIT 1""",
                    {"pid": p["parcel_id"][0]},
                )
                if not p.empty
                else None
            )

            left, right = st.columns([2, 1])
            with left:
                st.image(
                    "https://upload.wikimedia.org/wikipedia/commons/6/6e/OSM_Landuse.png",
                    caption="Mini map preview",
                    use_container_width=True,
                )
            with right:
                st.write("**Pluscode:**", p["pluscode"][0] if not p.empty else "—")
                st.write("**Parcel ID:**", p["parcel_id"][0] if not p.empty else "—")
                st.write("**Admin Zone:**", p["ward"][0] if not p.empty else "—")
                st.write("**Neighborhood:**", p["neighborhood"][0] if not p.empty else "—")
                val = a["avm_value_usd"][0] if (a is not None and not a.empty) else None
                st.metric("Valuation", f"${val:,.0f}" if val else "—")
                c1, c2, c3 = st.columns(3)
                c1.button("Print", use_container_width=True)
                c2.button("Appeal", use_container_width=True)
                c3.button("Update", use_container_width=True)

        # CONTACT
        with tabs[1]:
            st.write("**Name:**", row["full_name"])
            st.write("**Address:**", row["address"])
            st.write("**Phone:**", row["phone"])
            st.write("**Email:**", row["email"])

        # PAYMENTS
        with tabs[2]:
            if not p.empty:
                bills = read_df("SELECT * FROM tax_bills WHERE parcel_id=:pid", {"pid": p["parcel_id"][0]})
                st.dataframe(bills, use_container_width=True)
            else:
                st.info("No bills yet.")

elif page == "Parcel Records":
    st.title("Parcel Records")
    pid = st.text_input("Parcel ID or Pluscode")
    data = read_df(
        "SELECT parcel_id, pluscode, ward, zone, neighborhood, owner_id FROM parcels WHERE parcel_id LIKE :q OR pluscode LIKE :q",
        {"q": f"%{pid}%"},
    )
    st.dataframe(data, use_container_width=True)

else:
    st.title("Taxes & Assessments (Demo)")
    st.info("Configure rates and generate bills here in future iterations.")